/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./client/js/events.js
class EventManager {
    events;

    constructor() {
        this.events = new Map();
    }

    on(eventName, func, args, repeat) {
        let event = new EventListener(func, args, repeat);
        if(!this.events.has(eventName)) {
            this.events.set(eventName, []);
        }
        this.events.get(eventName).push(event);
    }

    off(eventName, func) {
        if(this.events.has(eventName)){
            this.offMap(this.events, eventName, func);
        }
    }

    offMap(map, eventName, func) {
        if (eventName !== null && eventName !== undefined) {
            if (func !== null && func !== undefined) {
                this.removeEvent(this.events, eventName, func);
            }
            else {
                map.delete(eventName);
            }
        }
        else {
            map = new Map();
        }
    }

    removeEvent(map, eventName, func) {
        map.get(eventName).forEach(function(event) {
            if(event.func == func) {
                let index = map.get(eventName).indexOf(event)
                map.get(eventName).splice(index, 1);
            }
        })
    }

    dispatchEvents(eventName) {
        if(this.events.has(eventName)) {
            this.events.get(eventName).forEach(event => {
                event.dispatch();
                if(event.repeat === 0) {
                    this.removeEvent(this.events, eventName, event.func);
                }
            })
        }
    }
}

class EventListener {
    func;
    args = [];
    repeat;

    constructor(func, args, repeat = -1) {
        this.func = func;
        this.args = args;
        this.repeat = repeat;
    }

    dispatch() {
        if(this.repeat > 0) {
            this.repeat--;
            this.func(this.args);
        }
    }
}



// console.log(eventManager.events)

/* harmony default export */ const events = (EventManager);
;// CONCATENATED MODULE: ./client/js/tween.js



class Tween {

    targetObject;
    targetFields;
    startValues = [];
    finishValues = [];
    deltaTime;
    startTime;
    eventManager;
    isStarted = false;

    constructor(target_object, config, deltaTime) {
        this.targetObject = target_object;
        this.targetFields = Object.keys(config);
        Object.values(config).forEach(val => {
            let { from, to } = val;
            this.startValues.push(val.from);
            this.finishValues.push(val.to);
        });
        for (let i = 0; i < this.targetFields.length; i++) {
            this.targetObject[this.targetFields[i]] = this.startValues[i]
        }
        this.deltaTime = deltaTime;
        this.eventManager = new events();
    }

    makeStep(currentTime, i) {
        let deltaValue = Math.abs(this.finishValues[i] - this.startValues[i]);
        let sign = Math.sign(this.finishValues[i] - this.startValues[i])
        if(currentTime - this.startTime < this.deltaTime) {
            this.targetObject[this.targetFields[i]] = this.startValues[i] + sign * (deltaValue * (currentTime - this.startTime) / this.deltaTime);
        }
        else if (currentTime - this.startTime >= this.deltaTime) {
            this.targetObject[this.targetFields[i]] = this.finishValues[i];
        }
    }

    update(time) {
        if (this.isStarted === true) {
            for (let i = 0; i < this.targetFields.length; i++) {

                // let eventsIterator = this.eventManager.events.keys()
                // for (let i = 0; i < this.eventManager.events.size; i++) {
                //     this.eventManager.dispatchEvents(eventsIterator.next().value);
                // }

                if (this.targetObject[this.targetFields[i]] !== this.finishValues[i]) {
                    console.log(this.finishValues);
                    console.log(this.targetObject.mary.style.top);
                    let makeStep = this.makeStep.bind(this);
                    makeStep(time, i);
                }

                if (time - this.startTime >= this.deltaTime) {
                    this.complete();
                }
            }
        }
    }

    on(eventName, func, args, repeat = 1) {
        this.eventManager.on(eventName, func, args, repeat);
        return this;
    }

    off(eventName, func) {
        this.eventManager.off(eventName, func);
        return this;
    }

    start(time) {
        this.startTime = time;
        this.isStarted = true;
        this.eventManager.dispatchEvents('start');
    }

    complete() {
        this.eventManager.dispatchEvents('complete');
        this.isStarted = false;
    }
}
;// CONCATENATED MODULE: ./client/js/script.js



class  PassengerCar extends (/* unused pure expression or super */ null && (Vehicle)) {
    #peopleAmount = 5;

    constructor(name) {
        super(name);
    }

    get peopleAmount() {
        return this.#peopleAmount;
    }

    set peopleAmount(amount) {
        if (amount > 0 && amount < 50) {
            this.#peopleAmount = amount;
        }
        else {
            console.log('Incorrect amount of people!');
        }

    }

    sound(name = '') {
        console.log(`${this.name} says: bipbi  ${name}`);
    }
}

// class Anime {
//     duration;
//     constructor(duration) {
//         this.duration = duration;
//     }
// }
//
// let anime = new Anime(24);
//
// let startX = 1;
// let finishX = 15;
// let deltaTime = 4000;
// const tweens = [];
// const cars = [];
// const car_models = ['honda', 'toyota', 'bmw', 'acura', 'nissan', 'lexus', 'mazda', 'renault', 'fw', 'opel'];
//
// let config1 = {
//     duration : {
//         from : 24,
//         to : 30
//     }
// }
//
// let config2 = {
//     x :{
//         from : 2,
//         to : 15
//     },
//     y:{
//         from : -2,
//         to : -30
//     }
// }
//
// let startFunc = () => console.log('Hi there');
// let helloFunc = (name) => console.log(`Hi, ${name}`);
// let completeFunc = () => console.log('Bye');
// let niceDayFunc = (name) => console.log(`Have a nice day, ${name}`);
//
// for(let i = 0; i < 10; i++) {
//     cars[i] = new PassengerCar(car_models[i]);
// }
//
// for (let i = 0; i < 10; i++) {
//     tweens[i] = new Tween(cars[i], config2, deltaTime);
//     tweens[i].on('start', startFunc, [], 1).on('complete', completeFunc, [], 1);
//     startX += 2;
//     finishX += 5;
//     //deltaTime += 2000;
// }
//
// // let anime_tween = new Tween(anime, config1, deltaTime);
// // anime_tween.on('complete', completeFunc, [], 3)
// // tweens[1] = anime_tween;
//
// setTimeout(() => {
//     tweens.forEach(tween => {
//         tween.start();
//     })
// }, 3000);
//
// setTimeout(() => {
//     tweens[5].off('complete', completeFunc);
//     tweens[6].off('complete', completeFunc);
// }, 4000);

class Roma {
    get mary() {
        return this.#mary;
    }

    get top() {
        return parseFloat(this.#mary.style.top);
    }

    get left() {
        return parseFloat(this.#mary.style.left);
    }

    set top(value) {
        this.#mary.style.top = value + 'px';
    }

    set left(value) {
        this.#mary.style.left = value + 'px';
    }

    #mary;

    constructor(mary) {
        this.#mary = mary;
    }
}
let config1 = {
    top : {
        from : 0,
        to : 500
    },
    left : {
        from : 50,
        to : 50
    }
}
let config2 = {
    top : {
        from : 500,
        to : 300
    },
    left : {
        from : 50,
        to : 300
    }
}
let deltaTime = 3000;

let mary = document.getElementById("imageId");
mary.style.top = '0px';
mary.style.rotate = '-21deg';
mary.style.width = '40%';
mary.style.left = '50px';

let romaClass1 = new Roma(mary);
let maryTween1 = new Tween(romaClass1, config1, deltaTime);

let tweens = [maryTween1];

tweens[0].on('complete', () => {
    let maryClass2 = new Roma(mary);
    let maryTween2 = new Tween(maryClass2, config2, deltaTime);
    tweens.push(maryTween2);
    tweens[1].start.call(tweens[1], performance.now());
}, []);

tweens[0].start(performance.now());

// tweens.forEach(tween => {
//     tween.start();
// })


function mainGameLoop(time) { //Write your code inside this function
    tweens.forEach(function(tween) {
        tween.update(time);
        // tween.targetFields.forEach((field) => {console.log(tween.targetObject[field]);})
    });
}

/* DON'T TOUCH THIS! */
requestAnimationFrame(function f (time) {
    mainGameLoop(time)
    requestAnimationFrame(f);
});

/******/ })()
;